<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        ny/un9fTkh7L2+nGRuvaPpzbe+sx0L//2Q==
</value>
  </data>
</root>