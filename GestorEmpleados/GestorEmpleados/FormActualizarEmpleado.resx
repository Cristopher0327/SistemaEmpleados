<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        e+sx0L//2Q==
</value>
  </data>
</root>